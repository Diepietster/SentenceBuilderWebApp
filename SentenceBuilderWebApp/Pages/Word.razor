@page "/words"
@using SentenceBuilderWebApp.Models;
@inject SentenceBuilderWebApp.APIManager.Service.APICallService api;
@inject IToastService toast;

<PageTitle>Words</PageTitle>

<div class="card">
    <div>
        <h1 style="text-align:center">Words</h1>
    </div>
</div>

<br />
<a class="btn btn-success" href="/addword">Add Word</a>
<br />
<br />

<div class="card">
    <div style="margin-top: 20px; margin-left: 20px; margin-right: 20px; margin-bottom: 20px;">
        <label>Select Word Type: </label>
    
        @if (WordTypes != null)
        {
            <select class="form-select" @onchange="(e)=>WordTypeChange(e)">
                <option value="0">Please select word type</option>
                @foreach(var type in WordTypes)
                {
                    <option value="@type.WordTypeId">@type.WordTypeDesc</option>
                }
            </select>
        }

        @if(getWords)
        {
            @if (wordsToDisplay == null || wordsToDisplay.Count <= 0)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Word</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var word in wordsToDisplay)
                        {
                            <tr>
                                <td>@word.WordId</td>
                                <td>@word.Word</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>
</div>
<br />
<div>
    @if(totalPages > 1)
    {
        @for(int i = 0; i < totalPages; i++)
        {
            var displayNum = i + 1;
            <button class="btn btn-primary" style="width: 40px; height: 40px;" @onclick="(() => Paging(displayNum))">@displayNum</button>
        }
    }
</div>

@code {
    public List<Words> words { get; set; } = new();
    public List<Words> wordsToDisplay { get; set; } = new();
    public List<WordType> WordTypes { get; set; } = new();
    public int selectedWordType { get; set; }
    public bool getWords = false;
    public int pageNumber { get; set; } = 1;
    public int pagesize { get; set; } = 10;
    public int totalPages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WordTypes = await api.GetWordTypesAsync();
    }

    async Task WordTypeChange(ChangeEventArgs e)
    {
        try
        {
            getWords = true;

            if(Convert.ToInt32(e.Value) != 0)
            {
                selectedWordType = Convert.ToInt32(e.Value);
                words = await api.GetWordsByTypeAsync(selectedWordType);
                await Paging(pageNumber);
            }

        }
        catch (Exception ex)
        {

            toast.ShowError(ex.Message);
        }
    }

    public async Task Paging(int pageNumber)
    {
        totalPages = words.Count % pagesize != 0 ? words.Count / pagesize + 1 : words.Count / pagesize;

        wordsToDisplay = words.Skip((pageNumber - 1) * pagesize).Take(pagesize).ToList();
    }

}
